Script started on Fri 07 Feb 2014 10:58:51 PM EST
hkim142@matrix:~/oop344/Assignment 1> whoi[Kami
hkim142
hkim142@matrix:~/oop344/Assignment 1> cat console.[Kl[Kplus.h consolelineedit.cpp consoole.h console.cpp keys.h 
/*
OOP344 ASSIGNMENT 1 Line Editing Facility
This Program has been written by
Henry Hyungi Kim
Student ID:025 741 125
myseneca ID:hkim142
OOP344 A Winter 2014
To prof. Kamal-Al-Deen, Hasan
*/
namespace cio{
// function definition delcariation
void display(const char *str, int row, int col, int fieldLen);
int edit(char *str, int row, int col, int fieldLength, int maxStrLength, bool* insertMode, int* strOffset, int* curPosition);
}/*
OOP344 ASSIGNMENT 1 Line Editing Facility
This Program has been written by
Henry Hyungi Kim
Student ID:025 741 125
myseneca ID:hkim142
OOP344 A Winter 2014
To prof. Kamal-Al-Deen, Hasan
*/
//declairing defines and libs
#define _CRT_SECURE_NO_WARNINGS
#include <cstring>
#include <cstdlib>
#include "console.h"
#include "consoleplus.h"
#include "keys.h"

namespace cio
{
	void display(const char *str, int row, int col, int fieldLen)
	{
		int numCharsToPrint, max_row, max_col, cur_y, strLen;
	  	const int col_fixed = col;
		const int row_fixed = row;
		console.setPosition(row, col);
		/* gets maximum values(boundries) of rows amd col from buffer */
		max_row = console.getRows();
		max_col = console.getCols();
		/*
		C-style, null-terminated string pointed to by str.
		*/
		if (!str)// if str is false ( null)
		{
			numCharsToPrint = 0;
		}
		/*
		if given string is not null( true)
		*/
		else
		{
			/*
			get lenght of given string
			*/
			strLen = strlen(str);
			/*
			 If fieldLen is 0 or less, function displays the portion of the entire string
			 that fits on the screenwith no trailing spaces.
			 */
			if (!fieldLen)//if fieldlenght is flase(null)
			{
				numCharsToPrint = strLen;
			}
			/*
			if current col postion + fieldLen passes max col limit
			*/
			else if (col + fieldLen > max_col)
			{
				/* if field lenght pass limit of col than calculate
				remain col left*/
				int remain_col = (max_col -col);
				numCharsToPrint = remain_col;
				/*
				if string length is lesser than remain col(total field len)
				*/
				if (strLen < remain_col) numCharsToPrint = strLen;
			}
			/*
			no special cases, fieldLen >0 & col+fieldLen !> max_col
			*/
			else
			{
				/*
					If the string is longer than fieldLen, function displays
					the first fieldLen characters
					*/
				numCharsToPrint = fieldLen;
				/*
					 If the string is shorter than fieldLen, function displays the portion of the entire string
					 that fits on the screen, followed by enough trailing spaces to fill out the field completely
					 */
				if (strLen < fieldLen) numCharsToPrint = strLen;

			}

			for (int i = 0; i < numCharsToPrint; i++)
			{
				console.setPosition(row, col + i); // updates row and col location
				console.setCharacter(str[i]); // gets character from string(character array)
				console.setPosition(row, col + i); // updates row and col location
				console.drawCharacter(); // draws character on user screen
				if (numCharsToPrint < fieldLen && i == numCharsToPrint - 1 && row == row_fixed && col < max_col)
				{
					for (int y = i + 1; y < fieldLen && (y+col) !=80; y++)//over write missing space in fieldlenght with space (' ')
					{
						console.setPosition(row, col + y);//update row and col location
						console.setCharacter(' '); // set character to draw as blank (' ')
						console.setPosition(row, col + y);// updates row and col location
						console.drawCharacter(); //drows the blank on user screen
						}
					i = numCharsToPrint + 1;//breaks loop
				}
			}
			if (numCharsToPrint == 0)// if there is any character to pring just print 1 space(' ')
			{
				console.setPosition(row, col_fixed);//updats cursor position to where field starts
				console.setCharacter(' ');// set character to draw as blank (' ')
				console.setPosition(row, col_fixed);// updates row and col location
				console.drawCharacter();// draws the blank on user screen
			}
		}
	}// end void display(...){...}

	int edit(char *str, int row, int col, int fieldLength, int maxStrLength, bool* insertMode, int* strOffset, int* curPosition)
	{
		int numCharsToWrite, user_input, y,key=0; // delclaration of fuction that will used on this function
		const int row_fixed = row;// initial value of row, which will never change. need for displaying and calculation
		const int col_fixed = col;// initial value of col, which will never change. need for displaying and calculation
		const int max_row = console.getRows(); //maximum row value can have
		const int max_col = console.getCols(); //maxium col value can have
		char input_temp, *modify, *mirror = new char[maxStrLength]; // creates variable needed for operation
		strcpy(mirror, str); //keeps original given str for back up
		if(*insertMode)// if insert mode is true( has value)
			display("Insertmode: ON",max_row -2,65,15); // shows insert mode is on 
		else if(!*insertMode)// if insertmode is false ( has ni value or its not positive value)
			display("Insertmode: OFF",max_row -2,65,15); //shows inser mode is off
		/*If the initial offset is beyond the end of the string,
		your function resets the offset to the length of the string;
		that is, to the index of the character immediately beyond the end of the string.*/
		if (*str && (*strOffset + col) > max_col)
			*strOffset = strlen(str);
		/*If no offset variable is pointed to; that is, if the address of the variable is NULL,
		your function sets the offset to the index of the first character in the string; that is, to 0.*/
		else if (!*str || !*strOffset)
			*strOffset = 0;
		/*If the initial cursor position is beyond the end of the field,
		your function resets the position to the last character in the field.*/
		if ((*curPosition + col) > max_col && !*str)
		{
			console.getPosition(row, col);

			/*If the position is beyond the end of the string, your function resets the position
			to that immediately beyond the end of the string. */

			if (col > max_col)
			{
				col = strlen(str); //position end of string == total string lenght exclude null bite which is strlen(str)
				console.setPosition(row, col);
			}
			console.setPosition(row, col);

		} // ends if( (*curPosition+col) > max_col && !str)

		/*If no cursor position variable is pointed to; that is,
		if the address of the variable is NULL,
		your function sets the cursor position to the first position in the field;
		that is, to position 0. */

		else if (!*curPosition)//curposition is  false (null)
			console.setPosition(0, 0);

		/*The function does not allow the cursor to move before the start of the field or past the end of the field.
		If the field ends at the right edge of the screen, your function does not allow the cursor to the right of that edge.*/

		if (fieldLength + col >= max_col)
			console.setPosition(0, 0);
		/*The user terminates editing by pressing ENTER, TAB, ESCAPE, UP, DOWN, PGUP, PGDN or any of the Function keys F(1) through F(12) inclusive. */
		if (*curPosition)
			col += *curPosition;//update cursor position by given curposition value if it has value(true)
		do// do loop start. this loop will not end until returning value from this function or entering speicific keys during loop
		{
			display(str + *strOffset, row_fixed, col_fixed, fieldLength); // call display where reference value is located at
			int lenght = strlen(str);//calculate updated string lenght for operation(calculation)
			console.setPosition(row, col ); // set cursor postion
			console.getPosition(row, col); //update
			console >> key;// get user input
			switch (key)// switch starts
			{
			case LEFT: // moves the cursor left one character, if possible, changing the offset, if necessary.
				if (*strOffset && col == col_fixed)// offSet is true and cursor located at where edit field start
					*strOffset -= 1;
				else if (col != col_fixed) // when cursor is not located at where edit field start (left end of field)
				{
					console.setPosition(row, col - 1); // set cursor postion
					console.getPosition(row, col); // update row, and col
				}
				break;
			case RIGHT://moves the cursor right one character, if possible, changing the offset, if necessary.
				if (col == fieldLength + col_fixed  && str[col - col_fixed + *strOffset] != '\0')//when cursor flahses end of field and string has offset value ( str[end_of_field+1] !='\0';)
					*strOffset += 1;// if operation need to change the offset
				else if (col < col_fixed + fieldLength)// when col is not flashing right end of field
				{
					console.setPosition(row, col + 1); // set cursor postion
					console.getPosition(row, col);  //update row, and col
				}
				break;
			case HOME: // moves the cursor to the beginning of the string, changing the offset, if necessary.
				if (*strOffset)//if there is any strOffset value (true)
					*strOffset = 0; // moves to beginning of string variable = reset the offet value
				console.setPosition(row_fixed, col_fixed); // set cursor postion
				console.getPosition(row, col); // update row, and col
				break;
			case END:// moves the cursor to the position to the right of the last character in the string, changing the offset, if necessary.
				if (lenght > fieldLength) // if total lenght of string is longer than field
					*strOffset = lenght - fieldLength; // calculate and set total offset vaule of this field
				console.setPosition(row, fieldLength + col_fixed); // set cursor postion to end of field
				console.getPosition(row, col); // update row, and col
				break;
			case DEL:
				modify = new char[maxStrLength]; // allocate memory
				strcpy(modify, str); // copys str
				for (int i = 0; i < lenght; i++)// while i is smaller than total lenght of string
				{
					modify[i] = str[i]; // copys string untill where cursor locates
					if (i == (col - col_fixed + *strOffset)) // cursor location calculation
					{
						for (y = i + 1; y <= lenght; y++) // loops skils 1 bits in string 
						{
							modify[y - 1] = str[y]; // modifiyed string copys 1 skiped value 
						}
						i = lenght + 1; // breaks loop
					}
				}
				strcpy(str, modify); // copy str from finished modifyed string
				delete[] modify; // delete string
				break;
			case BACKSPACE:
				if (col == col_fixed && *strOffset){ // if there is offset value and cursor points at beginning of field
					console.setPosition(row, col+ *strOffset);//updates console location +offset value
					*strOffset = 0; // pushes offset 
					console.getPosition(row, col);//update row, and col
				}
				if (col > col_fixed)
				{
					for (int i = col - col_fixed + *strOffset; str[i - 1]; i++)// calculate location of string which is (where cursor located )-(where field starts) + offset value
					{
						str[i - 1] = str[i]; // shift by 1 but startsy from left of cursor locates
					}
					console.setPosition(row, col - 1); // set cursor postion , moves to 1 left because its an backspacing
					console.getPosition(row, col); // update row, and col
				}
				break;
			case INSERT: // toggles Insert/Overstrike mode.
				if (*insertMode)//if insertmode is on (true) than turn off (false)
				{ 
					*insertMode = false;
					display("Insertmode: OFF",max_row -2,65,15); // shows insert mode is OFF
				}
				else if (!*insertMode)//if insertmode is off(false) than turn on (true)
				{
					*insertMode = true;
					display("Insertmode: ON",max_row -2,65,15); // shows insert mode is ON
				}
				break;
			case ESCAPE:
				strcpy(str, mirror);// return to original str received
				break;
			case ENTER:
				delete[] mirror;// erase memory allocation
				break;
			case UP: break;
			case DOWN: break;
			case PGUP: break;
			case PGDN: break;
			case F(1): break;
			case F(2): break;
			case F(3): break;
			case F(4): break;
			case F(5): break;
			case F(6): break;
			case F(7): break;
			case F(8): break;
			case F(9): break;
			case F(10): break;
			case F(11): break;
			case F(12): break;
			case UNKNOWN: break;
			default:
				if (key >= 32 && key <= 126 && lenght < maxStrLength)// when key is 32>= key value=< 126 which is 32 is 'a' is ACII and 126 is 'Z" is ACII and while string lenght is smaller than maximum string legnht value
				{
					if (*insertMode) // when insert mode is on (true) than endable insert mode
					{/*notice this may not finished*/
						for (int i = lenght; i > (col - col_fixed + *strOffset);i--)//when insert mode is triggered starts from end of string and shift back all character by 1
						{
							str[i] = str[i - 1];//shifting
						}
						str[col - col_fixed + *strOffset] = key;// after finished shifting enters user_input where cursor points at
					}
					else if (!*insertMode)// when insert mode is off (false) than endable overwriting mode
					{
						if (lenght < maxStrLength){ // while string has a space to enter more character
							str[col - col_fixed + *strOffset] = key;  // calculate location cursor location and overwirte input values
							if (col >= (fieldLength + col_fixed )) // if input value creates offset
								*strOffset += 1; // offset +1
						}
					}
					if (col < fieldLength+col_fixed)// if cursor is not located at end of field
						console.setPosition(row, col + 1); // set cursor postion and +1 from col because cursor moves next 1 after insert any
					else
					console.setPosition(row, col);  // otherwise cursor stays same location
					console.getPosition(row, col); // update row, and col
				}//key >= 32 && key <= 126 && lenght < maxStrLength
				break;
		}//switch(key) ends
			} while (key != ESCAPE &&  key != UP && key != DOWN && key != PGDN && key != PGUP && key != TAB); // ends while loop if thoses specification has been entered
		delete[] mirror;// erase memory allocation
		*insertMode = false; // exit insertmode when edit mode is finished6
		return key; // key user input latest
	}// edit(...) ends
}// namespace cio ends
#ifndef _FS_CONSOLE_H_
#define _FS_CONSOLE_H_

// Console Input Output Library - C++ Module
// console.h
//
// Fardad Soleimanloo, Chris Szalwinski
// August 25 2011
// Version 1.0
//

namespace cio {

// Console holds the state of the Console Input Output Facility
//
class Console {
    char* buffer;        // screen buffer
    int   curRow;        // cursor position - current row
    int   curCol;        // cursor position - current column
    int   bufrows;       // number of rows
    int   bufcols;       // number of columns
    Console& operator=(const Console&); // prevent assignments
    Console(const Console&);            // prevent copying
    void  clearBuffer(); // clear the buffer
    int   getKey();       // extract a key from console input
  public:
    Console();
    ~Console();
    int   getRows() const;
    int   getCols() const;
    void  getPosition(int& row, int& col) const;
    void  setPosition(int r, int c);
    char  getCharacter() const;
    void  setCharacter(char c);
    void  drawCharacter();
    void  clear();
    void  pause();
    friend Console& operator>>(Console&, int&);
    friend Console& operator<<(Console&, char);
};

Console& operator<<(Console&, const char*);

extern Console console; // console object - external linkage

} // end namespace cio
#endif// Console Input Output Library - Unified Implementation
// console.cpp
//
// Fardad Soleimanloo, Chris Szalwinski
// August 25 2011
// Version 1.0
//

/* table of platforms */
#define CIO_LINUX       1
#define CIO_MICROSOFT   2
#define CIO_BORLAND     3
#define CIO_UNIX        4

/* auto-select your platform here */
#if   defined __BORLANDC__
    #define CIO_PLATFORM CIO_BORLAND
    #define CIO_LOWER_LEVEL_H_ <conio.h>
#elif defined _MSC_VER
    #define CIO_PLATFORM CIO_MICROSOFT
    #include <windows.h>
    #define CIO_LOWER_LEVEL_H_ <conio.h>
#elif defined __MACH__
    #define CIO_PLATFORM CIO_UNIX
    #define CIO_LOWER_LEVEL_H_ <curses.h>
#elif defined __GNUC__
    #define CIO_PLATFORM CIO_LINUX
    #define CIO_LOWER_LEVEL_H_ <ncurses.h>
#elif !defined __BORLANDC__ && !defined _MSC_VER && !defined __GNUC__ && !defined __MACH__
    #error CONSOLE_PLT is undefined
#endif

extern "C" {
    #include CIO_LOWER_LEVEL_H_
}

#include "console.h"
#include "keys.h"

namespace cio { // continuation of cio namespace

//----------------- Platform-Dependent Section ------------------------------
//

#if CIO_PLATFORM == CIO_LINUX || CIO_PLATFORM == CIO_UNIX

// Console initializes the Console Input Output object
//
Console::Console() {
    ::initscr();
    ::noecho();
    ::cbreak();
    ::keypad(stdscr,1);
    bufrows = LINES;
    bufcols = COLS;
    if (bufrows * bufcols > 0)
        buffer  = new char[bufrows * bufcols];
    else
        buffer = 0;
    clear();
}

Console::~Console() {
    clear();
    setPosition(0, 0);
    delete [] buffer;
    ::endwin();
}

void Console::clear() {
    ::erase();
    clearBuffer();
}

int Console::getKey() {
    int key;
    ::refresh();
    key = ::getch();
    switch(key) {
        // KEY_* is defined in *curses.h
        case KEY_HOME:  key = HOME;   break;
        case KEY_UP:    key = UP;     break;
        case KEY_DOWN:  key = DOWN;   break;
        case KEY_LEFT:  key = LEFT;   break;
        case KEY_RIGHT: key = RIGHT;  break;
        case KEY_END:   key = END;    break;
        case KEY_NPAGE: key = PGDN;   break;
        case KEY_PPAGE: key = PGUP;   break;
        case KEY_DC:    key = DEL;    break;
        case KEY_IC:    key = INSERT; break;
        case KEY_F(1):  key = F(1);   break;
        case KEY_F(2):  key = F(2);   break;
        case KEY_F(3):  key = F(3);   break;
        case KEY_F(4):  key = F(4);   break;
        case KEY_F(5):  key = F(5);   break;
        case KEY_F(6):  key = F(6);   break;
        case KEY_F(7):  key = F(7);   break;
        case KEY_F(8):  key = F(8);   break;
        case KEY_F(9):  key = F(9);   break;
        case KEY_F(10): key = F(10);  break;
        case KEY_F(11): key = F(11);  break;
        case KEY_F(12): key = F(12);  break;
        case KEY_ENTER: key = ENTER;  break;
        case KEY_BACKSPACE: key = BACKSPACE; break;
        default:
            if (key < 0 || key > '~')
                key = UNKNOWN;
    }

    return key;
}

// setPosition moves the cursor to row r column c
//
void Console::setPosition(int r, int c) {
    curRow = r;
    curCol = c;
    ::move(r, c);
}

// drawCharacter draws the character at the current cursor position
//
void Console::drawCharacter() {
    if (buffer) ::addch(buffer[curRow * bufcols + curCol]);
}

// << inserts character c at the current cursor position
//
Console& operator<<(Console& os, char c) {
    ::addch(c);
    os.setCharacter(c);
    return os;
}

#elif CIO_PLATFORM == CIO_MICROSOFT

HANDLE  consh;
CONSOLE_SCREEN_BUFFER_INFO bufinfo;

// Console initializes the Console Input Output object
//
Console::Console() {
    consh = ::GetStdHandle(STD_OUTPUT_HANDLE);
    ::GetConsoleScreenBufferInfo(consh, &bufinfo);
    bufrows = bufinfo.srWindow.Bottom + 1;
    bufcols = bufinfo.srWindow.Right + 1;
    if (bufrows * bufcols > 0)
        buffer  = new char[bufrows * bufcols];
    else
        buffer = 0;
    clear();
}

Console::~Console() {
    clear();
    setPosition(0, 0);
    delete [] buffer;
}

void Console::clear() {
    DWORD
        len = bufrows * bufcols,
        actual;
    TCHAR ch = ' ';
    COORD coord;
    coord.X = 0;
    coord.Y = 0;
    ::FillConsoleOutputCharacter(consh, ch, len, coord, &actual);
    clearBuffer();
}

int Console::getKey() {
    int key;
    key = ::_getch();
    /* Platform Specific Key Code */
    #define KEY_ENTER  13
    if (key == 0) {
        key = ::_getch();
        /* Platform Specific Key Codes */
        #define KEY_F0     58
        #define KEY_F(n)   (KEY_F0+(((n)<=10)?(n):((n) + 64)))
        switch(key) {
            case KEY_F(1):  key = F(1);   break;
            case KEY_F(2):  key = F(2);   break;
            case KEY_F(3):  key = F(3);   break;
            case KEY_F(4):  key = F(4);   break;
            case KEY_F(5):  key = F(5);   break;
            case KEY_F(6):  key = F(6);   break;
            case KEY_F(7):  key = F(7);   break;
            case KEY_F(8):  key = F(8);   break;
            case KEY_F(9):  key = F(9);   break;
            case KEY_F(10): key = F(10);  break;
            default: key = UNKNOWN;
        }
    } else if (key == 224) {
        key = ::_getch();
        /* Platform Specific Key Codes */
        #define KEY_HOME   71
        #define KEY_UP     72
        #define KEY_DOWN   80
        #define KEY_LEFT   75
        #define KEY_RIGHT  77
        #define KEY_END    79
        #define KEY_NPAGE  81
        #define KEY_PPAGE  73
        #define KEY_DC     83
        #define KEY_IC     82
        #define KEY_ENTER  13
        switch(key) {
            case KEY_HOME:  key = HOME;   break;
            case KEY_UP:    key = UP;     break;
            case KEY_DOWN:  key = DOWN;   break;
            case KEY_LEFT:  key = LEFT;   break;
            case KEY_RIGHT: key = RIGHT;  break;
            case KEY_END:   key = END;    break;
            case KEY_NPAGE: key = PGDN;   break;
            case KEY_PPAGE: key = PGUP;   break;
            case KEY_DC:    key = DEL;    break;
            case KEY_IC:    key = INSERT; break;
            case KEY_F(11): key = F(11);  break;
            case KEY_F(12): key = F(12);  break;
            default: key = UNKNOWN;
        }
    } else if (key < 0 || key > '~')
        key = UNKNOWN;
    else if (key == KEY_ENTER)
        key = ENTER;

    return key;
}

// setPosition moves the cursor to row r column c
//
void Console::setPosition(int r, int c) {
    curRow = r;
    curCol = c;
    COORD coord;
    coord.X = c;
    coord.Y = r;
    ::SetConsoleCursorPosition(consh, coord);
}

// drawCharacter draws the character at the current cursor position
//
void Console::drawCharacter() {
    if (buffer) ::_putch(buffer[curRow * bufcols + curCol]);
}

// << inserts character c at the current cursor position
//
Console& operator<<(Console& os, char c) {
    ::_putch(c);
    os.setCharacter(c);
    return os;
}

#elif CIO_PLATFORM == CIO_BORLAND

// Console initializes the Console Input Output object
//
Console::Console() {
    struct text_info x;
    ::gettextinfo(&x);
    bufrows = x.screenheight;
    bufcols = x.screenwidth;
    if (bufrows * bufcols > 0)
        buffer  = new char[bufrows * bufcols];
    else
        buffer = 0;
    clear();
}

Console::~Console() {
    clear();
    setPosition(0, 0);
    delete [] buffer;
}

void Console::clear(){
    ::clrscr();
    clearBuffer();
}

int Console::getKey() {
    int key;
    key = ::getch();
    /* Platform Specific Key Code */
    #define KEY_ENTER  13
    if (key == 0) {
        key = ::getch();
        /* Platform Specific Key Codes */
        #define KEY_HOME   71
        #define KEY_UP     72
        #define KEY_DOWN   80
        #define KEY_LEFT   75
        #define KEY_RIGHT  77
        #define KEY_END    79
        #define KEY_NPAGE  81
        #define KEY_PPAGE  73
        #define KEY_DC     83
        #define KEY_IC     82
        #define KEY_F0     58
        #define KEY_F(n)   (KEY_F0+(((n)<=10)?(n):((n) + 64)))
        switch(key) {
            case KEY_HOME:  key = HOME;   break;
            case KEY_UP:    key = UP;     break;
            case KEY_DOWN:  key = DOWN;   break;
            case KEY_LEFT:  key = LEFT;   break;
            case KEY_RIGHT: key = RIGHT;  break;
            case KEY_END:   key = END;    break;
            case KEY_NPAGE: key = PGDN;   break;
            case KEY_PPAGE: key = PGUP;   break;
            case KEY_DC:    key = DEL; break;
            case KEY_IC:    key = INSERT; break;
            case KEY_F(1):  key = F(1);   break;
            case KEY_F(2):  key = F(2);   break;
            case KEY_F(3):  key = F(3);   break;
            case KEY_F(4):  key = F(4);   break;
            case KEY_F(5):  key = F(5);   break;
            case KEY_F(6):  key = F(6);   break;
            case KEY_F(7):  key = F(7);   break;
            case KEY_F(8):  key = F(8);   break;
            case KEY_F(9):  key = F(9);   break;
            case KEY_F(10): key = F(10);  break;
            case KEY_F(11): key = F(11);  break;
            case KEY_F(12): key = F(12);  break;
            default:
                key = UNKNOWN;
        }
    } else if (key < 0 || key > '~')
        key = UNKNOWN;
    else if (key == KEY_ENTER)
        key = ENTER;

    return key;
}

// setPosition moves the cursor to row r column c
//
void Console::setPosition(int r, int c) {
    curRow = r;
    curCol = c;
    ::gotoxy(c + 1, r + 1);
}

// drawCharacter draws the character at the current cursor position
//
void Console::drawCharacter() {
    if (buffer) ::putch(buffer[curRow * bufcols + curCol]);
}

// << inserts character c at the current cursor position
//
Console& operator<<(Console& os, char c) {
    ::putch(c);
    os.setCharacter(c);
    return os;
}

#endif

//--------------------------- Platform-Independent Section ------------------

// Definition of the Console Input Output object
//
Console console;

// getRows retrieves the number of rows in the output object
//
int  Console::getRows() const {
    return bufrows;
}

// getCols retrieves the number of columns in the output object
//
int  Console::getCols() const {
    return bufcols;
}

// getPosition retrieves the current position of the cursor
//
void Console::getPosition(int& r, int& c) const {
    r = curRow;
    c = curCol;
}

// clearBuffer clears the cio buffer and resets the cursor
// position to the top left corner
//
void Console::clearBuffer() {
    for (int i = 0; buffer && i < bufrows * bufcols; i++)
        buffer[i] = ' ';
    setPosition(0, 0);
}

// pause accepts a key press from the input object
//
void Console::pause() {
    getKey();
}

// setCharacter sets the character at the current cursor position to c
// and moves the currect cursor position one character towards the end
//
void Console::setCharacter(char c) {
    if (buffer)
        buffer[curRow * bufcols + curCol++] = c;
}

// getCharacter returns the character at the current cursor position
//
char Console::getCharacter() const {
    return buffer ? buffer[curRow * bufcols + curCol] : ' ';
}

// >> extracts the next key from the input object
//
Console& operator>>(Console& is, int& c) {
    c = is.getKey();
    return is;
}

// << inserts string str at the current cursor position

Console& operator<<(Console& os, const char* str) {
    for(int i = 0; str[i]; i++)
        os << str[i];
    return os;
}

} // end namespace cio
#ifndef _FS_KEYS_H_
#define _FS_KEYS_H_
// Keys Header
// keys.h
//
// Fardad Soleimanloo, Chris Szalwinski
// August 25 2011
// Version 1.0

/* Virtual Key Codes */

#define TAB       '\t'
#define BACKSPACE '\b'
#define ALARM     '\a'
#define ESCAPE    27
#define ENTER     '\n'
#define SPACE     ' '
#define HOME      1000
#define UP        1001
#define DOWN      1002
#define LEFT      1003
#define RIGHT     1004
#define END       1005
#define PGDN      1006
#define PGUP      1007
#define DEL       1008
#define INSERT    1009
#define F(n)      (1009+(n))
#define UNKNOWN   9999

#endifhkim142@matrix:~/oop344/Assignment 1> g++ -Ln[K[Klncurses console.cpp consolelineedit.ccpp a1test.cpp 
hkim142@matrix:~/oop344/Assignment 1> exit
exit

Script done on Fri 07 Feb 2014 10:59:48 PM EST
